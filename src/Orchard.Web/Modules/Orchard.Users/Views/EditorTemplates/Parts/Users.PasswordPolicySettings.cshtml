@model Orchard.Users.Models.PasswordPolicySettingsPart
@using Orchard.Messaging.Services;
@{
    var messageManager = WorkContext.Resolve<IMessageManager>();
    var emailEnabled = messageManager.GetAvailableChannelServices().Contains("email");

    Layout.Title = T("Password Settings");
}
<fieldset>
    <legend>
        @T("Complexity settings")
    </legend>
    <div>
        <label for="@Html.FieldIdFor(m => m.MinPasswordLength)">@T("Minimum password length")</label>
    </div>
    <div>
        @Html.EditorFor(m => m.MinPasswordLength, new { htmlAttributes = new { min = 5 } })
        <span class="hint">@T("Minimum length for passwords")</span>
    </div>
    <div>
        <label for="@Html.FieldIdFor(m => m.KeepPasswordHistory)">@T("The password must contain:")</label>
    </div>
    <div>
        @Html.EditorFor(m => m.RequireUpperAndLowerCaseChars)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.RequireUpperAndLowerCaseChars)">@T("Both upper and lowercase characters")</label> &nbsp;&nbsp;
        @Html.EditorFor(m => m.RequireNummericChars)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.RequireNummericChars)">@T("Number(s) [0-9]")</label>&nbsp;&nbsp;
        @Html.EditorFor(m => m.RequireSpecialChars)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.RequireSpecialChars)">@T("Special characters [&^%! etc.]")</label>
        <span class="hint">
            @T("These settings help your users to create stronger passwords ")
        </span>
    </div>
</fieldset>
<fieldset>

    <legend>
        @T("Security options")
    </legend>
    <div>
        @Html.EditorFor(m => m.EnablePasswordReset, new { htmlAttributes = new { @checked= Model.EnablePasswordReset ? "checked" :"", disabled= emailEnabled ? "":"disabled"} })
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.EnablePasswordReset)">@T("Enable password reset")</label>
        @if (!emailEnabled)
        {
            <div class="message message-Warning">@T("This option is available when an email module is activated.")</div>
        }
        <span class="hint">@T("Display a link to enable users to reset their password")</span>
    </div>
    <div>
        <label for="@Html.FieldIdFor(m => m.MaxInvalidPasswordAttempts)">@T("Maximum number of invalid password attempts")</label>
    </div>
    <div>
        @Html.EditorFor(m => m.MaxInvalidPasswordAttempts, new { htmlAttributes = new { min = 0 } })
        <span class="hint">@T("0 = unlimited. After the maximum number of invalid attempts, the account will be locked. ")</span>
    </div>
    <div>
        <label for="@Html.FieldIdFor(m => m.PasswordAttemptWindow)">@T("Password attempt window")</label>
    </div>
    <div>
        @Html.EditorFor(m => m.PasswordAttemptWindow, new { htmlAttributes = new { min = 0 } })
        <span class="hint">@T("The time window, in minutes, during which consecutive failed attempts to provide a valid password are tracked. When '0', alle consecutive attempts are tracked.")</span>
    </div>
</fieldset>

<fieldset>

    <legend>
        @T("Password Expiry")
    </legend>
    <div>
        <label for="@Html.FieldIdFor(m => m.PasswordExpirationInDays)">@T("Password expiration in days")</label>
    </div>
    <div>
        @Html.EditorFor(m => m.PasswordExpirationInDays, new { htmlAttributes = new { min = 0 } })
        <span class="hint">@T("0 = disabled. If enabled, user passwords will automatically expire after the amount of days set.")</span>
    </div>
    <div>
        <label for="@Html.FieldIdFor(m => m.ExpirationWarningDaysAhead)">@T("Show password-expiration warning - days before expiration")</label>
    </div>
    <div>
        @Html.EditorFor(m => m.ExpirationWarningDaysAhead, new { htmlAttributes = new { min = 0 } })
        <span class="hint">@T("0 = disabled. If enabled, the system shows a password-expiration warning when the password expires in the number of days configured (or sooner).")</span>
    </div>
</fieldset>
<fieldset>

    <legend>
        @T("Advanced options")
    </legend>
    <div>
        @Html.EditorFor(m => m.KeepPasswordHistory)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.KeepPasswordHistory)">@T("Keep password history")</label>
    </div>
    <div data-controllerid="@Html.FieldIdFor(m => m.KeepPasswordHistory)">
        @Html.EditorFor(m => m.AllowPreviousPasswords)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.AllowPreviousPasswords)">@T("Allow users to use previously used passwords")</label>
    </div>
    <div>
        @Html.EditorFor(m => m.LockAccountOnPasswordExpiration)
        <label class="forcheckbox" for="@Html.FieldIdFor(m => m.LockAccountOnPasswordExpiration)">@T("Lock the account when the password expires")</label>
        <span class="hint">When enabled, users accounts will be locked when the password is expired. Administrator should be contacted to unlock the account and reset the password.</span>
    </div>
</fieldset>
